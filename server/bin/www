#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var models = require("../models");
const Sequelize = require('sequelize');

var port = 8080;
app.set('port', port);

var server = http.createServer(app);


const sequelize = new Sequelize('radon_base', 'dart_app', 'RADON2019', {
    host: '86.119.40.8',
    dialect: 'postgres'
})

sequelize
    .authenticate()
    .then(() => {
        console.log('Connection has been established successfully.');
    })
    .catch(err => {
        console.error('Unable to connect to the database:', err);
    });

models.sequelize.sync({ force: true }).then(function() {
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    return Room.create({
        name: "Dummy Room",
        averageValue: 1001
    })
});


function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}